// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package chain1

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type BlockChangedFilter struct {
	Number_gte int `json:"number_gte"`
}

// GetNumber_gte returns BlockChangedFilter.Number_gte, and is useful for accessing the field via an interface.
func (v *BlockChangedFilter) GetNumber_gte() int { return v.Number_gte }

// HardCodedChain1_swapsSwap includes the requested fields of the GraphQL type Swap.
type HardCodedChain1_swapsSwap struct {
	Id         string                        `json:"id"`
	Timestamp  int64                         `json:"timestamp"`
	Pair       HardCodedChain1_swapsSwapPair `json:"pair"`
	Sender     []byte                        `json:"sender"`
	Amount0In  float64                       `json:"amount0In"`
	Amount1In  float64                       `json:"amount1In"`
	Amount0Out float64                       `json:"amount0Out"`
	Amount1Out float64                       `json:"amount1Out"`
	To         []byte                        `json:"to"`
	LogIndex   int64                         `json:"logIndex"`
	AmountUSD  float64                       `json:"amountUSD"`
}

// GetId returns HardCodedChain1_swapsSwap.Id, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetId() string { return v.Id }

// GetTimestamp returns HardCodedChain1_swapsSwap.Timestamp, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetTimestamp() int64 { return v.Timestamp }

// GetPair returns HardCodedChain1_swapsSwap.Pair, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetPair() HardCodedChain1_swapsSwapPair { return v.Pair }

// GetSender returns HardCodedChain1_swapsSwap.Sender, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetSender() []byte { return v.Sender }

// GetAmount0In returns HardCodedChain1_swapsSwap.Amount0In, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetAmount0In() float64 { return v.Amount0In }

// GetAmount1In returns HardCodedChain1_swapsSwap.Amount1In, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetAmount1In() float64 { return v.Amount1In }

// GetAmount0Out returns HardCodedChain1_swapsSwap.Amount0Out, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetAmount0Out() float64 { return v.Amount0Out }

// GetAmount1Out returns HardCodedChain1_swapsSwap.Amount1Out, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetAmount1Out() float64 { return v.Amount1Out }

// GetTo returns HardCodedChain1_swapsSwap.To, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetTo() []byte { return v.To }

// GetLogIndex returns HardCodedChain1_swapsSwap.LogIndex, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetLogIndex() int64 { return v.LogIndex }

// GetAmountUSD returns HardCodedChain1_swapsSwap.AmountUSD, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwap) GetAmountUSD() float64 { return v.AmountUSD }

// HardCodedChain1_swapsSwapPair includes the requested fields of the GraphQL type Pair.
type HardCodedChain1_swapsSwapPair struct {
	Id                     string  `json:"id"`
	Reserve0               float64 `json:"reserve0"`
	Reserve1               float64 `json:"reserve1"`
	TotalSupply            float64 `json:"totalSupply"`
	ReserveETH             float64 `json:"reserveETH"`
	ReserveUSD             float64 `json:"reserveUSD"`
	TrackedReserveETH      float64 `json:"trackedReserveETH"`
	Token0Price            float64 `json:"token0Price"`
	Token1Price            float64 `json:"token1Price"`
	VolumeToken0           float64 `json:"volumeToken0"`
	VolumeToken1           float64 `json:"volumeToken1"`
	VolumeUSD              float64 `json:"volumeUSD"`
	UntrackedVolumeUSD     float64 `json:"untrackedVolumeUSD"`
	TxCount                int64   `json:"txCount"`
	CreatedAtTimestamp     int64   `json:"createdAtTimestamp"`
	CreatedAtBlockNumber   int64   `json:"createdAtBlockNumber"`
	LiquidityProviderCount int64   `json:"liquidityProviderCount"`
}

// GetId returns HardCodedChain1_swapsSwapPair.Id, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetId() string { return v.Id }

// GetReserve0 returns HardCodedChain1_swapsSwapPair.Reserve0, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetReserve0() float64 { return v.Reserve0 }

// GetReserve1 returns HardCodedChain1_swapsSwapPair.Reserve1, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetReserve1() float64 { return v.Reserve1 }

// GetTotalSupply returns HardCodedChain1_swapsSwapPair.TotalSupply, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetTotalSupply() float64 { return v.TotalSupply }

// GetReserveETH returns HardCodedChain1_swapsSwapPair.ReserveETH, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetReserveETH() float64 { return v.ReserveETH }

// GetReserveUSD returns HardCodedChain1_swapsSwapPair.ReserveUSD, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetReserveUSD() float64 { return v.ReserveUSD }

// GetTrackedReserveETH returns HardCodedChain1_swapsSwapPair.TrackedReserveETH, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetTrackedReserveETH() float64 { return v.TrackedReserveETH }

// GetToken0Price returns HardCodedChain1_swapsSwapPair.Token0Price, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetToken0Price() float64 { return v.Token0Price }

// GetToken1Price returns HardCodedChain1_swapsSwapPair.Token1Price, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetToken1Price() float64 { return v.Token1Price }

// GetVolumeToken0 returns HardCodedChain1_swapsSwapPair.VolumeToken0, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetVolumeToken0() float64 { return v.VolumeToken0 }

// GetVolumeToken1 returns HardCodedChain1_swapsSwapPair.VolumeToken1, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetVolumeToken1() float64 { return v.VolumeToken1 }

// GetVolumeUSD returns HardCodedChain1_swapsSwapPair.VolumeUSD, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetVolumeUSD() float64 { return v.VolumeUSD }

// GetUntrackedVolumeUSD returns HardCodedChain1_swapsSwapPair.UntrackedVolumeUSD, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetUntrackedVolumeUSD() float64 { return v.UntrackedVolumeUSD }

// GetTxCount returns HardCodedChain1_swapsSwapPair.TxCount, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetTxCount() int64 { return v.TxCount }

// GetCreatedAtTimestamp returns HardCodedChain1_swapsSwapPair.CreatedAtTimestamp, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetCreatedAtTimestamp() int64 { return v.CreatedAtTimestamp }

// GetCreatedAtBlockNumber returns HardCodedChain1_swapsSwapPair.CreatedAtBlockNumber, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetCreatedAtBlockNumber() int64 {
	return v.CreatedAtBlockNumber
}

// GetLiquidityProviderCount returns HardCodedChain1_swapsSwapPair.LiquidityProviderCount, and is useful for accessing the field via an interface.
func (v *HardCodedChain1_swapsSwapPair) GetLiquidityProviderCount() int64 {
	return v.LiquidityProviderCount
}

// HardCodedResponse is returned by HardCoded on success.
type HardCodedResponse struct {
	Chain1_swaps []HardCodedChain1_swapsSwap `json:"Chain1_swaps"`
}

// GetChain1_swaps returns HardCodedResponse.Chain1_swaps, and is useful for accessing the field via an interface.
func (v *HardCodedResponse) GetChain1_swaps() []HardCodedChain1_swapsSwap { return v.Chain1_swaps }

// Defines the order direction, either ascending or descending
type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "asc"
	OrderDirectionDesc OrderDirection = "desc"
)

type Swap_filter struct {
	Id                                 string    `json:"id"`
	Id_not                             string    `json:"id_not"`
	Id_gt                              string    `json:"id_gt"`
	Id_lt                              string    `json:"id_lt"`
	Id_gte                             string    `json:"id_gte"`
	Id_lte                             string    `json:"id_lte"`
	Id_in                              []string  `json:"id_in"`
	Id_not_in                          []string  `json:"id_not_in"`
	Transaction                        string    `json:"transaction"`
	Transaction_not                    string    `json:"transaction_not"`
	Transaction_gt                     string    `json:"transaction_gt"`
	Transaction_lt                     string    `json:"transaction_lt"`
	Transaction_gte                    string    `json:"transaction_gte"`
	Transaction_lte                    string    `json:"transaction_lte"`
	Transaction_in                     []string  `json:"transaction_in"`
	Transaction_not_in                 []string  `json:"transaction_not_in"`
	Transaction_contains               string    `json:"transaction_contains"`
	Transaction_contains_nocase        string    `json:"transaction_contains_nocase"`
	Transaction_not_contains           string    `json:"transaction_not_contains"`
	Transaction_not_contains_nocase    string    `json:"transaction_not_contains_nocase"`
	Transaction_starts_with            string    `json:"transaction_starts_with"`
	Transaction_starts_with_nocase     string    `json:"transaction_starts_with_nocase"`
	Transaction_not_starts_with        string    `json:"transaction_not_starts_with"`
	Transaction_not_starts_with_nocase string    `json:"transaction_not_starts_with_nocase"`
	Transaction_ends_with              string    `json:"transaction_ends_with"`
	Transaction_ends_with_nocase       string    `json:"transaction_ends_with_nocase"`
	Transaction_not_ends_with          string    `json:"transaction_not_ends_with"`
	Transaction_not_ends_with_nocase   string    `json:"transaction_not_ends_with_nocase"`
	Timestamp                          int64     `json:"timestamp"`
	Timestamp_not                      int64     `json:"timestamp_not"`
	Timestamp_gt                       int64     `json:"timestamp_gt"`
	Timestamp_lt                       int64     `json:"timestamp_lt"`
	Timestamp_gte                      int64     `json:"timestamp_gte"`
	Timestamp_lte                      int64     `json:"timestamp_lte"`
	Timestamp_in                       []int64   `json:"timestamp_in"`
	Timestamp_not_in                   []int64   `json:"timestamp_not_in"`
	Pair                               string    `json:"pair"`
	Pair_not                           string    `json:"pair_not"`
	Pair_gt                            string    `json:"pair_gt"`
	Pair_lt                            string    `json:"pair_lt"`
	Pair_gte                           string    `json:"pair_gte"`
	Pair_lte                           string    `json:"pair_lte"`
	Pair_in                            []string  `json:"pair_in"`
	Pair_not_in                        []string  `json:"pair_not_in"`
	Pair_contains                      string    `json:"pair_contains"`
	Pair_contains_nocase               string    `json:"pair_contains_nocase"`
	Pair_not_contains                  string    `json:"pair_not_contains"`
	Pair_not_contains_nocase           string    `json:"pair_not_contains_nocase"`
	Pair_starts_with                   string    `json:"pair_starts_with"`
	Pair_starts_with_nocase            string    `json:"pair_starts_with_nocase"`
	Pair_not_starts_with               string    `json:"pair_not_starts_with"`
	Pair_not_starts_with_nocase        string    `json:"pair_not_starts_with_nocase"`
	Pair_ends_with                     string    `json:"pair_ends_with"`
	Pair_ends_with_nocase              string    `json:"pair_ends_with_nocase"`
	Pair_not_ends_with                 string    `json:"pair_not_ends_with"`
	Pair_not_ends_with_nocase          string    `json:"pair_not_ends_with_nocase"`
	Sender                             []byte    `json:"sender"`
	Sender_not                         []byte    `json:"sender_not"`
	Sender_in                          [][]byte  `json:"sender_in"`
	Sender_not_in                      [][]byte  `json:"sender_not_in"`
	Sender_contains                    []byte    `json:"sender_contains"`
	Sender_not_contains                []byte    `json:"sender_not_contains"`
	Amount0In                          float64   `json:"amount0In"`
	Amount0In_not                      float64   `json:"amount0In_not"`
	Amount0In_gt                       float64   `json:"amount0In_gt"`
	Amount0In_lt                       float64   `json:"amount0In_lt"`
	Amount0In_gte                      float64   `json:"amount0In_gte"`
	Amount0In_lte                      float64   `json:"amount0In_lte"`
	Amount0In_in                       []float64 `json:"amount0In_in"`
	Amount0In_not_in                   []float64 `json:"amount0In_not_in"`
	Amount1In                          float64   `json:"amount1In"`
	Amount1In_not                      float64   `json:"amount1In_not"`
	Amount1In_gt                       float64   `json:"amount1In_gt"`
	Amount1In_lt                       float64   `json:"amount1In_lt"`
	Amount1In_gte                      float64   `json:"amount1In_gte"`
	Amount1In_lte                      float64   `json:"amount1In_lte"`
	Amount1In_in                       []float64 `json:"amount1In_in"`
	Amount1In_not_in                   []float64 `json:"amount1In_not_in"`
	Amount0Out                         float64   `json:"amount0Out"`
	Amount0Out_not                     float64   `json:"amount0Out_not"`
	Amount0Out_gt                      float64   `json:"amount0Out_gt"`
	Amount0Out_lt                      float64   `json:"amount0Out_lt"`
	Amount0Out_gte                     float64   `json:"amount0Out_gte"`
	Amount0Out_lte                     float64   `json:"amount0Out_lte"`
	Amount0Out_in                      []float64 `json:"amount0Out_in"`
	Amount0Out_not_in                  []float64 `json:"amount0Out_not_in"`
	Amount1Out                         float64   `json:"amount1Out"`
	Amount1Out_not                     float64   `json:"amount1Out_not"`
	Amount1Out_gt                      float64   `json:"amount1Out_gt"`
	Amount1Out_lt                      float64   `json:"amount1Out_lt"`
	Amount1Out_gte                     float64   `json:"amount1Out_gte"`
	Amount1Out_lte                     float64   `json:"amount1Out_lte"`
	Amount1Out_in                      []float64 `json:"amount1Out_in"`
	Amount1Out_not_in                  []float64 `json:"amount1Out_not_in"`
	To                                 []byte    `json:"to"`
	To_not                             []byte    `json:"to_not"`
	To_in                              [][]byte  `json:"to_in"`
	To_not_in                          [][]byte  `json:"to_not_in"`
	To_contains                        []byte    `json:"to_contains"`
	To_not_contains                    []byte    `json:"to_not_contains"`
	LogIndex                           int64     `json:"logIndex"`
	LogIndex_not                       int64     `json:"logIndex_not"`
	LogIndex_gt                        int64     `json:"logIndex_gt"`
	LogIndex_lt                        int64     `json:"logIndex_lt"`
	LogIndex_gte                       int64     `json:"logIndex_gte"`
	LogIndex_lte                       int64     `json:"logIndex_lte"`
	LogIndex_in                        []int64   `json:"logIndex_in"`
	LogIndex_not_in                    []int64   `json:"logIndex_not_in"`
	AmountUSD                          float64   `json:"amountUSD"`
	AmountUSD_not                      float64   `json:"amountUSD_not"`
	AmountUSD_gt                       float64   `json:"amountUSD_gt"`
	AmountUSD_lt                       float64   `json:"amountUSD_lt"`
	AmountUSD_gte                      float64   `json:"amountUSD_gte"`
	AmountUSD_lte                      float64   `json:"amountUSD_lte"`
	AmountUSD_in                       []float64 `json:"amountUSD_in"`
	AmountUSD_not_in                   []float64 `json:"amountUSD_not_in"`
	// Filter for the block changed event.
	Change_block BlockChangedFilter `json:"_change_block"`
}

// GetId returns Swap_filter.Id, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId() string { return v.Id }

// GetId_not returns Swap_filter.Id_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_not() string { return v.Id_not }

// GetId_gt returns Swap_filter.Id_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_gt() string { return v.Id_gt }

// GetId_lt returns Swap_filter.Id_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_lt() string { return v.Id_lt }

// GetId_gte returns Swap_filter.Id_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_gte() string { return v.Id_gte }

// GetId_lte returns Swap_filter.Id_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_lte() string { return v.Id_lte }

// GetId_in returns Swap_filter.Id_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_in() []string { return v.Id_in }

// GetId_not_in returns Swap_filter.Id_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetId_not_in() []string { return v.Id_not_in }

// GetTransaction returns Swap_filter.Transaction, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction() string { return v.Transaction }

// GetTransaction_not returns Swap_filter.Transaction_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not() string { return v.Transaction_not }

// GetTransaction_gt returns Swap_filter.Transaction_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_gt() string { return v.Transaction_gt }

// GetTransaction_lt returns Swap_filter.Transaction_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_lt() string { return v.Transaction_lt }

// GetTransaction_gte returns Swap_filter.Transaction_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_gte() string { return v.Transaction_gte }

// GetTransaction_lte returns Swap_filter.Transaction_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_lte() string { return v.Transaction_lte }

// GetTransaction_in returns Swap_filter.Transaction_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_in() []string { return v.Transaction_in }

// GetTransaction_not_in returns Swap_filter.Transaction_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_in() []string { return v.Transaction_not_in }

// GetTransaction_contains returns Swap_filter.Transaction_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_contains() string { return v.Transaction_contains }

// GetTransaction_contains_nocase returns Swap_filter.Transaction_contains_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_contains_nocase() string { return v.Transaction_contains_nocase }

// GetTransaction_not_contains returns Swap_filter.Transaction_not_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_contains() string { return v.Transaction_not_contains }

// GetTransaction_not_contains_nocase returns Swap_filter.Transaction_not_contains_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_contains_nocase() string {
	return v.Transaction_not_contains_nocase
}

// GetTransaction_starts_with returns Swap_filter.Transaction_starts_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_starts_with() string { return v.Transaction_starts_with }

// GetTransaction_starts_with_nocase returns Swap_filter.Transaction_starts_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_starts_with_nocase() string {
	return v.Transaction_starts_with_nocase
}

// GetTransaction_not_starts_with returns Swap_filter.Transaction_not_starts_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_starts_with() string { return v.Transaction_not_starts_with }

// GetTransaction_not_starts_with_nocase returns Swap_filter.Transaction_not_starts_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_starts_with_nocase() string {
	return v.Transaction_not_starts_with_nocase
}

// GetTransaction_ends_with returns Swap_filter.Transaction_ends_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_ends_with() string { return v.Transaction_ends_with }

// GetTransaction_ends_with_nocase returns Swap_filter.Transaction_ends_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_ends_with_nocase() string { return v.Transaction_ends_with_nocase }

// GetTransaction_not_ends_with returns Swap_filter.Transaction_not_ends_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_ends_with() string { return v.Transaction_not_ends_with }

// GetTransaction_not_ends_with_nocase returns Swap_filter.Transaction_not_ends_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTransaction_not_ends_with_nocase() string {
	return v.Transaction_not_ends_with_nocase
}

// GetTimestamp returns Swap_filter.Timestamp, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp() int64 { return v.Timestamp }

// GetTimestamp_not returns Swap_filter.Timestamp_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_not() int64 { return v.Timestamp_not }

// GetTimestamp_gt returns Swap_filter.Timestamp_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_gt() int64 { return v.Timestamp_gt }

// GetTimestamp_lt returns Swap_filter.Timestamp_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_lt() int64 { return v.Timestamp_lt }

// GetTimestamp_gte returns Swap_filter.Timestamp_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_gte() int64 { return v.Timestamp_gte }

// GetTimestamp_lte returns Swap_filter.Timestamp_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_lte() int64 { return v.Timestamp_lte }

// GetTimestamp_in returns Swap_filter.Timestamp_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_in() []int64 { return v.Timestamp_in }

// GetTimestamp_not_in returns Swap_filter.Timestamp_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTimestamp_not_in() []int64 { return v.Timestamp_not_in }

// GetPair returns Swap_filter.Pair, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair() string { return v.Pair }

// GetPair_not returns Swap_filter.Pair_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not() string { return v.Pair_not }

// GetPair_gt returns Swap_filter.Pair_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_gt() string { return v.Pair_gt }

// GetPair_lt returns Swap_filter.Pair_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_lt() string { return v.Pair_lt }

// GetPair_gte returns Swap_filter.Pair_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_gte() string { return v.Pair_gte }

// GetPair_lte returns Swap_filter.Pair_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_lte() string { return v.Pair_lte }

// GetPair_in returns Swap_filter.Pair_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_in() []string { return v.Pair_in }

// GetPair_not_in returns Swap_filter.Pair_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_in() []string { return v.Pair_not_in }

// GetPair_contains returns Swap_filter.Pair_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_contains() string { return v.Pair_contains }

// GetPair_contains_nocase returns Swap_filter.Pair_contains_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_contains_nocase() string { return v.Pair_contains_nocase }

// GetPair_not_contains returns Swap_filter.Pair_not_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_contains() string { return v.Pair_not_contains }

// GetPair_not_contains_nocase returns Swap_filter.Pair_not_contains_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_contains_nocase() string { return v.Pair_not_contains_nocase }

// GetPair_starts_with returns Swap_filter.Pair_starts_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_starts_with() string { return v.Pair_starts_with }

// GetPair_starts_with_nocase returns Swap_filter.Pair_starts_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_starts_with_nocase() string { return v.Pair_starts_with_nocase }

// GetPair_not_starts_with returns Swap_filter.Pair_not_starts_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_starts_with() string { return v.Pair_not_starts_with }

// GetPair_not_starts_with_nocase returns Swap_filter.Pair_not_starts_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_starts_with_nocase() string { return v.Pair_not_starts_with_nocase }

// GetPair_ends_with returns Swap_filter.Pair_ends_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_ends_with() string { return v.Pair_ends_with }

// GetPair_ends_with_nocase returns Swap_filter.Pair_ends_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_ends_with_nocase() string { return v.Pair_ends_with_nocase }

// GetPair_not_ends_with returns Swap_filter.Pair_not_ends_with, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_ends_with() string { return v.Pair_not_ends_with }

// GetPair_not_ends_with_nocase returns Swap_filter.Pair_not_ends_with_nocase, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetPair_not_ends_with_nocase() string { return v.Pair_not_ends_with_nocase }

// GetSender returns Swap_filter.Sender, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender() []byte { return v.Sender }

// GetSender_not returns Swap_filter.Sender_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender_not() []byte { return v.Sender_not }

// GetSender_in returns Swap_filter.Sender_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender_in() [][]byte { return v.Sender_in }

// GetSender_not_in returns Swap_filter.Sender_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender_not_in() [][]byte { return v.Sender_not_in }

// GetSender_contains returns Swap_filter.Sender_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender_contains() []byte { return v.Sender_contains }

// GetSender_not_contains returns Swap_filter.Sender_not_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetSender_not_contains() []byte { return v.Sender_not_contains }

// GetAmount0In returns Swap_filter.Amount0In, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In() float64 { return v.Amount0In }

// GetAmount0In_not returns Swap_filter.Amount0In_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_not() float64 { return v.Amount0In_not }

// GetAmount0In_gt returns Swap_filter.Amount0In_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_gt() float64 { return v.Amount0In_gt }

// GetAmount0In_lt returns Swap_filter.Amount0In_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_lt() float64 { return v.Amount0In_lt }

// GetAmount0In_gte returns Swap_filter.Amount0In_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_gte() float64 { return v.Amount0In_gte }

// GetAmount0In_lte returns Swap_filter.Amount0In_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_lte() float64 { return v.Amount0In_lte }

// GetAmount0In_in returns Swap_filter.Amount0In_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_in() []float64 { return v.Amount0In_in }

// GetAmount0In_not_in returns Swap_filter.Amount0In_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0In_not_in() []float64 { return v.Amount0In_not_in }

// GetAmount1In returns Swap_filter.Amount1In, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In() float64 { return v.Amount1In }

// GetAmount1In_not returns Swap_filter.Amount1In_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_not() float64 { return v.Amount1In_not }

// GetAmount1In_gt returns Swap_filter.Amount1In_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_gt() float64 { return v.Amount1In_gt }

// GetAmount1In_lt returns Swap_filter.Amount1In_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_lt() float64 { return v.Amount1In_lt }

// GetAmount1In_gte returns Swap_filter.Amount1In_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_gte() float64 { return v.Amount1In_gte }

// GetAmount1In_lte returns Swap_filter.Amount1In_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_lte() float64 { return v.Amount1In_lte }

// GetAmount1In_in returns Swap_filter.Amount1In_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_in() []float64 { return v.Amount1In_in }

// GetAmount1In_not_in returns Swap_filter.Amount1In_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1In_not_in() []float64 { return v.Amount1In_not_in }

// GetAmount0Out returns Swap_filter.Amount0Out, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out() float64 { return v.Amount0Out }

// GetAmount0Out_not returns Swap_filter.Amount0Out_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_not() float64 { return v.Amount0Out_not }

// GetAmount0Out_gt returns Swap_filter.Amount0Out_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_gt() float64 { return v.Amount0Out_gt }

// GetAmount0Out_lt returns Swap_filter.Amount0Out_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_lt() float64 { return v.Amount0Out_lt }

// GetAmount0Out_gte returns Swap_filter.Amount0Out_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_gte() float64 { return v.Amount0Out_gte }

// GetAmount0Out_lte returns Swap_filter.Amount0Out_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_lte() float64 { return v.Amount0Out_lte }

// GetAmount0Out_in returns Swap_filter.Amount0Out_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_in() []float64 { return v.Amount0Out_in }

// GetAmount0Out_not_in returns Swap_filter.Amount0Out_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount0Out_not_in() []float64 { return v.Amount0Out_not_in }

// GetAmount1Out returns Swap_filter.Amount1Out, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out() float64 { return v.Amount1Out }

// GetAmount1Out_not returns Swap_filter.Amount1Out_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_not() float64 { return v.Amount1Out_not }

// GetAmount1Out_gt returns Swap_filter.Amount1Out_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_gt() float64 { return v.Amount1Out_gt }

// GetAmount1Out_lt returns Swap_filter.Amount1Out_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_lt() float64 { return v.Amount1Out_lt }

// GetAmount1Out_gte returns Swap_filter.Amount1Out_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_gte() float64 { return v.Amount1Out_gte }

// GetAmount1Out_lte returns Swap_filter.Amount1Out_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_lte() float64 { return v.Amount1Out_lte }

// GetAmount1Out_in returns Swap_filter.Amount1Out_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_in() []float64 { return v.Amount1Out_in }

// GetAmount1Out_not_in returns Swap_filter.Amount1Out_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmount1Out_not_in() []float64 { return v.Amount1Out_not_in }

// GetTo returns Swap_filter.To, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo() []byte { return v.To }

// GetTo_not returns Swap_filter.To_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo_not() []byte { return v.To_not }

// GetTo_in returns Swap_filter.To_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo_in() [][]byte { return v.To_in }

// GetTo_not_in returns Swap_filter.To_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo_not_in() [][]byte { return v.To_not_in }

// GetTo_contains returns Swap_filter.To_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo_contains() []byte { return v.To_contains }

// GetTo_not_contains returns Swap_filter.To_not_contains, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetTo_not_contains() []byte { return v.To_not_contains }

// GetLogIndex returns Swap_filter.LogIndex, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex() int64 { return v.LogIndex }

// GetLogIndex_not returns Swap_filter.LogIndex_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_not() int64 { return v.LogIndex_not }

// GetLogIndex_gt returns Swap_filter.LogIndex_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_gt() int64 { return v.LogIndex_gt }

// GetLogIndex_lt returns Swap_filter.LogIndex_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_lt() int64 { return v.LogIndex_lt }

// GetLogIndex_gte returns Swap_filter.LogIndex_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_gte() int64 { return v.LogIndex_gte }

// GetLogIndex_lte returns Swap_filter.LogIndex_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_lte() int64 { return v.LogIndex_lte }

// GetLogIndex_in returns Swap_filter.LogIndex_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_in() []int64 { return v.LogIndex_in }

// GetLogIndex_not_in returns Swap_filter.LogIndex_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetLogIndex_not_in() []int64 { return v.LogIndex_not_in }

// GetAmountUSD returns Swap_filter.AmountUSD, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD() float64 { return v.AmountUSD }

// GetAmountUSD_not returns Swap_filter.AmountUSD_not, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_not() float64 { return v.AmountUSD_not }

// GetAmountUSD_gt returns Swap_filter.AmountUSD_gt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_gt() float64 { return v.AmountUSD_gt }

// GetAmountUSD_lt returns Swap_filter.AmountUSD_lt, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_lt() float64 { return v.AmountUSD_lt }

// GetAmountUSD_gte returns Swap_filter.AmountUSD_gte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_gte() float64 { return v.AmountUSD_gte }

// GetAmountUSD_lte returns Swap_filter.AmountUSD_lte, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_lte() float64 { return v.AmountUSD_lte }

// GetAmountUSD_in returns Swap_filter.AmountUSD_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_in() []float64 { return v.AmountUSD_in }

// GetAmountUSD_not_in returns Swap_filter.AmountUSD_not_in, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetAmountUSD_not_in() []float64 { return v.AmountUSD_not_in }

// GetChange_block returns Swap_filter.Change_block, and is useful for accessing the field via an interface.
func (v *Swap_filter) GetChange_block() BlockChangedFilter { return v.Change_block }

type Swap_orderBy string

const (
	Swap_orderById          Swap_orderBy = "id"
	Swap_orderByTransaction Swap_orderBy = "transaction"
	Swap_orderByTimestamp   Swap_orderBy = "timestamp"
	Swap_orderByPair        Swap_orderBy = "pair"
	Swap_orderBySender      Swap_orderBy = "sender"
	Swap_orderByAmount0in   Swap_orderBy = "amount0In"
	Swap_orderByAmount1in   Swap_orderBy = "amount1In"
	Swap_orderByAmount0out  Swap_orderBy = "amount0Out"
	Swap_orderByAmount1out  Swap_orderBy = "amount1Out"
	Swap_orderByTo          Swap_orderBy = "to"
	Swap_orderByLogindex    Swap_orderBy = "logIndex"
	Swap_orderByAmountusd   Swap_orderBy = "amountUSD"
)

// WithArgsChain1_swapsSwap includes the requested fields of the GraphQL type Swap.
type WithArgsChain1_swapsSwap struct {
	Id         string                       `json:"id"`
	Timestamp  int64                        `json:"timestamp"`
	Pair       WithArgsChain1_swapsSwapPair `json:"pair"`
	Sender     []byte                       `json:"sender"`
	Amount0In  float64                      `json:"amount0In"`
	Amount1In  float64                      `json:"amount1In"`
	Amount0Out float64                      `json:"amount0Out"`
	Amount1Out float64                      `json:"amount1Out"`
	To         []byte                       `json:"to"`
	LogIndex   int64                        `json:"logIndex"`
	AmountUSD  float64                      `json:"amountUSD"`
}

// GetId returns WithArgsChain1_swapsSwap.Id, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetId() string { return v.Id }

// GetTimestamp returns WithArgsChain1_swapsSwap.Timestamp, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetTimestamp() int64 { return v.Timestamp }

// GetPair returns WithArgsChain1_swapsSwap.Pair, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetPair() WithArgsChain1_swapsSwapPair { return v.Pair }

// GetSender returns WithArgsChain1_swapsSwap.Sender, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetSender() []byte { return v.Sender }

// GetAmount0In returns WithArgsChain1_swapsSwap.Amount0In, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetAmount0In() float64 { return v.Amount0In }

// GetAmount1In returns WithArgsChain1_swapsSwap.Amount1In, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetAmount1In() float64 { return v.Amount1In }

// GetAmount0Out returns WithArgsChain1_swapsSwap.Amount0Out, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetAmount0Out() float64 { return v.Amount0Out }

// GetAmount1Out returns WithArgsChain1_swapsSwap.Amount1Out, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetAmount1Out() float64 { return v.Amount1Out }

// GetTo returns WithArgsChain1_swapsSwap.To, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetTo() []byte { return v.To }

// GetLogIndex returns WithArgsChain1_swapsSwap.LogIndex, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetLogIndex() int64 { return v.LogIndex }

// GetAmountUSD returns WithArgsChain1_swapsSwap.AmountUSD, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwap) GetAmountUSD() float64 { return v.AmountUSD }

// WithArgsChain1_swapsSwapPair includes the requested fields of the GraphQL type Pair.
type WithArgsChain1_swapsSwapPair struct {
	Id                     string  `json:"id"`
	Reserve0               float64 `json:"reserve0"`
	Reserve1               float64 `json:"reserve1"`
	TotalSupply            float64 `json:"totalSupply"`
	ReserveETH             float64 `json:"reserveETH"`
	ReserveUSD             float64 `json:"reserveUSD"`
	TrackedReserveETH      float64 `json:"trackedReserveETH"`
	Token0Price            float64 `json:"token0Price"`
	Token1Price            float64 `json:"token1Price"`
	VolumeToken0           float64 `json:"volumeToken0"`
	VolumeToken1           float64 `json:"volumeToken1"`
	VolumeUSD              float64 `json:"volumeUSD"`
	UntrackedVolumeUSD     float64 `json:"untrackedVolumeUSD"`
	TxCount                int64   `json:"txCount"`
	CreatedAtTimestamp     int64   `json:"createdAtTimestamp"`
	CreatedAtBlockNumber   int64   `json:"createdAtBlockNumber"`
	LiquidityProviderCount int64   `json:"liquidityProviderCount"`
}

// GetId returns WithArgsChain1_swapsSwapPair.Id, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetId() string { return v.Id }

// GetReserve0 returns WithArgsChain1_swapsSwapPair.Reserve0, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetReserve0() float64 { return v.Reserve0 }

// GetReserve1 returns WithArgsChain1_swapsSwapPair.Reserve1, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetReserve1() float64 { return v.Reserve1 }

// GetTotalSupply returns WithArgsChain1_swapsSwapPair.TotalSupply, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetTotalSupply() float64 { return v.TotalSupply }

// GetReserveETH returns WithArgsChain1_swapsSwapPair.ReserveETH, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetReserveETH() float64 { return v.ReserveETH }

// GetReserveUSD returns WithArgsChain1_swapsSwapPair.ReserveUSD, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetReserveUSD() float64 { return v.ReserveUSD }

// GetTrackedReserveETH returns WithArgsChain1_swapsSwapPair.TrackedReserveETH, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetTrackedReserveETH() float64 { return v.TrackedReserveETH }

// GetToken0Price returns WithArgsChain1_swapsSwapPair.Token0Price, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetToken0Price() float64 { return v.Token0Price }

// GetToken1Price returns WithArgsChain1_swapsSwapPair.Token1Price, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetToken1Price() float64 { return v.Token1Price }

// GetVolumeToken0 returns WithArgsChain1_swapsSwapPair.VolumeToken0, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetVolumeToken0() float64 { return v.VolumeToken0 }

// GetVolumeToken1 returns WithArgsChain1_swapsSwapPair.VolumeToken1, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetVolumeToken1() float64 { return v.VolumeToken1 }

// GetVolumeUSD returns WithArgsChain1_swapsSwapPair.VolumeUSD, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetVolumeUSD() float64 { return v.VolumeUSD }

// GetUntrackedVolumeUSD returns WithArgsChain1_swapsSwapPair.UntrackedVolumeUSD, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetUntrackedVolumeUSD() float64 { return v.UntrackedVolumeUSD }

// GetTxCount returns WithArgsChain1_swapsSwapPair.TxCount, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetTxCount() int64 { return v.TxCount }

// GetCreatedAtTimestamp returns WithArgsChain1_swapsSwapPair.CreatedAtTimestamp, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetCreatedAtTimestamp() int64 { return v.CreatedAtTimestamp }

// GetCreatedAtBlockNumber returns WithArgsChain1_swapsSwapPair.CreatedAtBlockNumber, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetCreatedAtBlockNumber() int64 { return v.CreatedAtBlockNumber }

// GetLiquidityProviderCount returns WithArgsChain1_swapsSwapPair.LiquidityProviderCount, and is useful for accessing the field via an interface.
func (v *WithArgsChain1_swapsSwapPair) GetLiquidityProviderCount() int64 {
	return v.LiquidityProviderCount
}

// WithArgsResponse is returned by WithArgs on success.
type WithArgsResponse struct {
	Chain1_swaps []WithArgsChain1_swapsSwap `json:"Chain1_swaps"`
}

// GetChain1_swaps returns WithArgsResponse.Chain1_swaps, and is useful for accessing the field via an interface.
func (v *WithArgsResponse) GetChain1_swaps() []WithArgsChain1_swapsSwap { return v.Chain1_swaps }

// __WithArgsInput is used internally by genqlient
type __WithArgsInput struct {
	Skip           int            `json:"skip"`
	First          int            `json:"first"`
	OrderBy        Swap_orderBy   `json:"orderBy"`
	OrderDirection OrderDirection `json:"orderDirection"`
	Where          Swap_filter    `json:"where"`
}

// GetSkip returns __WithArgsInput.Skip, and is useful for accessing the field via an interface.
func (v *__WithArgsInput) GetSkip() int { return v.Skip }

// GetFirst returns __WithArgsInput.First, and is useful for accessing the field via an interface.
func (v *__WithArgsInput) GetFirst() int { return v.First }

// GetOrderBy returns __WithArgsInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__WithArgsInput) GetOrderBy() Swap_orderBy { return v.OrderBy }

// GetOrderDirection returns __WithArgsInput.OrderDirection, and is useful for accessing the field via an interface.
func (v *__WithArgsInput) GetOrderDirection() OrderDirection { return v.OrderDirection }

// GetWhere returns __WithArgsInput.Where, and is useful for accessing the field via an interface.
func (v *__WithArgsInput) GetWhere() Swap_filter { return v.Where }

// The query or mutation executed by HardCoded.
const HardCoded_Operation = `
query HardCoded {
	Chain1_swaps(skip: 0, first: 100, orderBy: timestamp, orderDirection: desc, where: {timestamp_gt:1650000000}) {
		id
		timestamp
		pair {
			id
			reserve0
			reserve1
			totalSupply
			reserveETH
			reserveUSD
			trackedReserveETH
			token0Price
			token1Price
			volumeToken0
			volumeToken1
			volumeUSD
			untrackedVolumeUSD
			txCount
			createdAtTimestamp
			createdAtBlockNumber
			liquidityProviderCount
		}
		sender
		amount0In
		amount1In
		amount0Out
		amount1Out
		to
		logIndex
		amountUSD
	}
}
`

func HardCoded(
	ctx_ context.Context,
	client_ graphql.Client,
) (*HardCodedResponse, error) {
	req_ := &graphql.Request{
		OpName: "HardCoded",
		Query:  HardCoded_Operation,
	}
	var err_ error

	var data_ HardCodedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by WithArgs.
const WithArgs_Operation = `
query WithArgs ($skip: Int, $first: Int, $orderBy: Swap_orderBy, $orderDirection: OrderDirection, $where: Swap_filter) {
	Chain1_swaps(skip: $skip, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, where: $where) {
		id
		timestamp
		pair {
			id
			reserve0
			reserve1
			totalSupply
			reserveETH
			reserveUSD
			trackedReserveETH
			token0Price
			token1Price
			volumeToken0
			volumeToken1
			volumeUSD
			untrackedVolumeUSD
			txCount
			createdAtTimestamp
			createdAtBlockNumber
			liquidityProviderCount
		}
		sender
		amount0In
		amount1In
		amount0Out
		amount1Out
		to
		logIndex
		amountUSD
	}
}
`

func WithArgs(
	ctx_ context.Context,
	client_ graphql.Client,
	skip int,
	first int,
	orderBy Swap_orderBy,
	orderDirection OrderDirection,
	where Swap_filter,
) (*WithArgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "WithArgs",
		Query:  WithArgs_Operation,
		Variables: &__WithArgsInput{
			Skip:           skip,
			First:          first,
			OrderBy:        orderBy,
			OrderDirection: orderDirection,
			Where:          where,
		},
	}
	var err_ error

	var data_ WithArgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
